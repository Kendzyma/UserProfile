name: Google Cloud Run Java CD
on:
  push:
  pull_request:
    branches:
      - main
    types:
      - closed
  workflow_dispatch:
env:
  GCLOUD_REGION: us-central1
  GCLOUD_GCR: us-central1-docker.pkg.dev
  SERVICE_NAME: gc-station-service
jobs:
  dev-build:
    environment:
      name: dev
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.m2
          key: ${{ runner.os }}-maven-test-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-test-
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: 'projects/44284727423/locations/global/workloadIdentityPools/github-identity-pool-gc-dev/providers/github-provider'
          service_account: 'github-actions@gitcharger-dev.iam.gserviceaccount.com'
      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v1.1.1
        with:
          version: '>= 363.0.0'
      - name: Docker Login
        run: |
          gcloud auth configure-docker ${{ env.GCLOUD_GCR }}

      - name: Get Version
        id: app_version
        run: |
          APP_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Application version: $APP_VERSION"
          echo "APP_VERSION=$APP_VERSION" >> "$GITHUB_OUTPUT"
      - name: Generate Image name and Tag
        id: tag
        env:
          GCLOUD_IMAGE_REPOSITORY: ${{ secrets.GCLOUD_IMAGE_REPOSITORY }}
          GCLOUD_PROJECT_ID: ${{ secrets.GCLOUD_PROJECT_ID }}
        run: |
          CI_VERSION="${{ steps.app_version.outputs.APP_VERSION }}.${{ github.run_number }}${{ github.run_attempt }}"
          IMAGE_NAME="${GCLOUD_GCR}/${GCLOUD_PROJECT_ID}/${GCLOUD_IMAGE_REPOSITORY}/${SERVICE_NAME}"
          echo "Generated tag: $CI_VERSION..."
          echo "Generated image name: $IMAGE_NAME"
          echo "IMAGE_NAME=$IMAGE_NAME" >> "$GITHUB_OUTPUT"
          echo "CI_VERSION=$CI_VERSION" >> "$GITHUB_OUTPUT"
      - name: Build Docker Image
        env:
          GCLOUD_IMAGE_REPOSITORY: ${{ secrets.GCLOUD_IMAGE_REPOSITORY }}
          TESTCONTAINERS_RYUK_DISABLED: true
          GCLOUD_PROJECT_ID: ${{ secrets.GCLOUD_PROJECT_ID }}
          POSTGRES_URL: ${{ secrets.POSTGRES_URL }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          DB_INSTANCE: ${{ secrets.DB_INSTANCE }}
        run: |
          DOCKER_IMAGE="${{ steps.tag.outputs.IMAGE_NAME }}"
          DOCKER_IMAGE_TAG="${{ steps.tag.outputs.CI_VERSION }}"
          echo $DOCKER_IMAGE
          ./mvnw package -Dpackaging=docker -Djib.docker.image=$DOCKER_IMAGE -Djib.docker.tag=$DOCKER_IMAGE_TAG --no-transfer-progress
      - name: Docker Push
        env:
          GCLOUD_IMAGE_REPOSITORY: ${{ secrets.GCLOUD_IMAGE_REPOSITORY }}
          GCLOUD_PROJECT_ID: ${{ secrets.GCLOUD_PROJECT_ID }}
        run: |
          docker push "${{ steps.tag.outputs.IMAGE_NAME }}:${{ steps.tag.outputs.CI_VERSION }}"

  dev-deploy:
#    if: github.event.pull_request.merged == true || github.ref == 'refs/heads/main'
    environment:
      name: dev
    needs: dev-build
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    env:
      GCLOUD_PROJECT_ID: ${{ secrets.GCLOUD_PROJECT_ID }}
      POSTGRES_URL: ${{ secrets.POSTGRES_URL }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      DB_INSTANCE: ${{ secrets.DB_INSTANCE }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
      - name: Deploy Cloud-dev Run
        run: |
          DOCKER_IMAGE="${{ steps.tag.outputs.IMAGE_NAME }}:${{ steps.tag.outputs.CI_VERSION }}"
          gcloud run deploy "${SERVICE_NAME}" --quiet \
            --image "${DOCKER_IMAGE}" --project "${GCLOUD_PROJECT_ID}" \
            --add-cloudsql-instances "${DB_INSTANCE}" \
            --set-env-vars "POSTGRES_URL=${POSTGRES_URL}" \
            --set-env-vars "POSTGRES_USER=${POSTGRES_USER}" \
            --set-env-vars "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}" \
            --region "${GCLOUD_REGION}" --platform managed --allow-unauthenticated --format json
          echo "Invoke endpoint:"
          gcloud run services list --platform managed --format json | jq -r \
            '.[] | select(.metadata.name == "${SERVICE_NAME}") | .status.address.url'

  prod-deploy:
    if: github.event.pull_request.merged == true || github.ref == 'refs/heads/main'
    environment:
      name: prod
    needs: dev-deploy
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    env:
      GCLOUD_PROJECT_ID: ${{ secrets.GCLOUD_PROJECT_ID }}
      POSTGRES_URL: ${{ secrets.POSTGRES_URL }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      DB_INSTANCE: ${{ secrets.DB_INSTANCE }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
      - name: Deploy Cloud-prod Run
        run: |
          DOCKER_IMAGE="${{ needs.dev-build.outputs.IMAGE_NAME }}:${{ needs.dev-build.outputs.CI_VERSION }}"
          gcloud run deploy "${SERVICE_NAME}" --quiet \
            --image "${DOCKER_IMAGE}" --project "${GCLOUD_PROJECT_ID}" \
            --add-cloudsql-instances "${DB_INSTANCE}" \
            --set-env-vars "POSTGRES_URL=${POSTGRES_URL}" \
            --set-env-vars "POSTGRES_USER=${POSTGRES_USER}" \
            --set-env-vars "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}" \
            --region "${GCLOUD_REGION}" --platform managed --allow-unauthenticated --format json
          echo "Invoke endpoint:"
          gcloud run services list --platform managed --format json | jq -r \
            '.[] | select(.metadata.name == "${SERVICE_NAME}") | .status.address.url'